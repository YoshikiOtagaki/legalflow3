import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export interface CreateTaskData {
  caseId: string;
  description: string;
  dueDate?: Date;
  isCompleted?: boolean;
  isAutoGenerated?: boolean;
  assignedToId?: string;
}

export interface UpdateTaskData {
  description?: string;
  dueDate?: Date;
  isCompleted?: boolean;
  isAutoGenerated?: boolean;
  assignedToId?: string;
}

export class TaskService {
  /**
   * タスクを作成
   */
  static async create(data: CreateTaskData) {
    return await prisma.task.create({
      data: {
        caseId: data.caseId,
        description: data.description,
        dueDate: data.dueDate,
        isCompleted: data.isCompleted || false,
        isAutoGenerated: data.isAutoGenerated || false,
        assignedToId: data.assignedToId,
      },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
    });
  }

  /**
   * 複数のタスクを一括作成
   */
  static async createMany(tasks: CreateTaskData[]) {
    return await prisma.task.createMany({
      data: tasks.map(task => ({
        caseId: task.caseId,
        description: task.description,
        dueDate: task.dueDate,
        isCompleted: task.isCompleted || false,
        isAutoGenerated: task.isAutoGenerated || false,
        assignedToId: task.assignedToId,
      })),
    });
  }

  /**
   * IDでタスクを取得
   */
  static async findById(id: string) {
    return await prisma.task.findUnique({
      where: { id },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
    });
  }

  /**
   * 事件IDでタスクを取得
   */
  static async findByCaseId(caseId: string) {
    return await prisma.task.findMany({
      where: { caseId },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: [
        { isCompleted: 'asc' },
        { dueDate: 'asc' },
        { createdAt: 'desc' },
      ],
    });
  }

  /**
   * ユーザーIDでタスクを取得
   */
  static async findByAssignedUserId(assignedToId: string) {
    return await prisma.task.findMany({
      where: { assignedToId },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: [
        { isCompleted: 'asc' },
        { dueDate: 'asc' },
        { createdAt: 'desc' },
      ],
    });
  }

  /**
   * 完了済みタスクを取得
   */
  static async findCompleted(caseId?: string) {
    return await prisma.task.findMany({
      where: {
        isCompleted: true,
        ...(caseId && { caseId }),
      },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: {
        updatedAt: 'desc',
      },
    });
  }

  /**
   * 未完了タスクを取得
   */
  static async findPending(caseId?: string) {
    return await prisma.task.findMany({
      where: {
        isCompleted: false,
        ...(caseId && { caseId }),
      },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: [
        { dueDate: 'asc' },
        { createdAt: 'desc' },
      ],
    });
  }

  /**
   * 自動生成タスクを取得
   */
  static async findAutoGenerated(caseId?: string) {
    return await prisma.task.findMany({
      where: {
        isAutoGenerated: true,
        ...(caseId && { caseId }),
      },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: {
        createdAt: 'desc',
      },
    });
  }

  /**
   * 期限切れタスクを取得
   */
  static async findOverdue(caseId?: string) {
    const now = new Date();
    return await prisma.task.findMany({
      where: {
        isCompleted: false,
        dueDate: {
          lt: now,
        },
        ...(caseId && { caseId }),
      },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: {
        dueDate: 'asc',
      },
    });
  }

  /**
   * 全タスクを取得
   */
  static async findAll() {
    return await prisma.task.findMany({
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
      orderBy: [
        { isCompleted: 'asc' },
        { dueDate: 'asc' },
        { createdAt: 'desc' },
      ],
    });
  }

  /**
   * タスクを更新
   */
  static async update(id: string, data: UpdateTaskData) {
    return await prisma.task.update({
      where: { id },
      data,
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
    });
  }

  /**
   * タスクを完了にする
   */
  static async markCompleted(id: string) {
    return await prisma.task.update({
      where: { id },
      data: { isCompleted: true },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
    });
  }

  /**
   * タスクを未完了にする
   */
  static async markPending(id: string) {
    return await prisma.task.update({
      where: { id },
      data: { isCompleted: false },
      include: {
        case: {
          include: {
            category: true,
            currentPhase: true,
          },
        },
        assignedTo: true,
      },
    });
  }

  /**
   * タスクを削除
   */
  static async delete(id: string) {
    return await prisma.task.delete({
      where: { id },
    });
  }

  /**
   * 事件の全タスクを削除
   */
  static async deleteByCaseId(caseId: string) {
    return await prisma.task.deleteMany({
      where: { caseId },
    });
  }

  /**
   * タスクが存在するかチェック
   */
  static async exists(id: string): Promise<boolean> {
    const task = await prisma.task.findUnique({
      where: { id },
      select: { id: true },
    });
    return !!task;
  }

  /**
   * 事件のタスク数を取得
   */
  static async countByCase(caseId: string) {
    return await prisma.task.count({
      where: { caseId },
    });
  }

  /**
   * ユーザーのタスク数を取得
   */
  static async countByUser(assignedToId: string) {
    return await prisma.task.count({
      where: { assignedToId },
    });
  }

  /**
   * 全タスク数を取得
   */
  static async count() {
    return await prisma.task.count();
  }

  /**
   * 完了済みタスク数を取得
   */
  static async countCompleted(caseId?: string) {
    return await prisma.task.count({
      where: {
        isCompleted: true,
        ...(caseId && { caseId }),
      },
    });
  }

  /**
   * 未完了タスク数を取得
   */
  static async countPending(caseId?: string) {
    return await prisma.task.count({
      where: {
        isCompleted: false,
        ...(caseId && { caseId }),
      },
    });
  }

  /**
   * 期限切れタスク数を取得
   */
  static async countOverdue(caseId?: string) {
    const now = new Date();
    return await prisma.task.count({
      where: {
        isCompleted: false,
        dueDate: {
          lt: now,
        },
        ...(caseId && { caseId }),
      },
    });
  }
}

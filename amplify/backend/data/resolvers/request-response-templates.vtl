## LegalFlow3 - Request/Response Mapping Templates
## VTL templates for AppSync resolvers

## Request Templates

### Create Case Request Template
#set($input = $util.toJson($context.arguments.input))
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "input": $input
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

### Update Case Request Template
#set($input = $util.toJson($context.arguments.input))
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "input": $input
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

### Delete Case Request Template
#set($id = $context.arguments.id)
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "id": "$id"
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

### Get Case Request Template
#set($id = $context.arguments.id)
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "id": "$id"
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

### List Cases Request Template
#set($limit = $context.arguments.limit)
#set($nextToken = $context.arguments.nextToken)
#set($status = $context.arguments.status)
#set($categoryId = $context.arguments.categoryId)
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "limit": #if($limit)$limit#else null#end,
      "nextToken": #if($nextToken)"$nextToken"#else null#end,
      "status": #if($status)"$status"#else null#end,
      "categoryId": #if($categoryId)"$categoryId"#else null#end
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

### Search Cases Request Template
#set($filter = $util.toJson($context.arguments.filter))
#set($limit = $context.arguments.limit)
#set($nextToken = $context.arguments.nextToken)
#set($identity = $util.toJson($context.identity))
{
  "version": "2017-02-28",
  "operation": "Invoke",
  "payload": {
    "arguments": {
      "filter": $filter,
      "limit": #if($limit)$limit#else null#end,
      "nextToken": #if($nextToken)"$nextToken"#else null#end
    },
    "identity": $identity,
    "source": $util.toJson($context.source)
  }
}

## Response Templates

### Create Case Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

### Update Case Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

### Delete Case Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

### Get Case Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

### List Cases Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

### Search Cases Response Template
#if($ctx.error)
  $util.error($ctx.error.message, $ctx.error.type)
#end
$util.toJson($ctx.result)

## Subscription Templates

### On Case Created Subscription Template
#set($case = $util.toJson($context.source))
$util.toJson($case)

### On Case Updated Subscription Template
#set($case = $util.toJson($context.source))
$util.toJson($case)

### On Case Deleted Subscription Template
#set($case = $util.toJson($context.source))
$util.toJson($case)

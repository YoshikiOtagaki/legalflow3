# LegalFlow3 - Security Pipeline
# GitHub Actions workflow for security scanning and compliance

name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1' # Weekly on Monday at 2 AM

env:
  NODE_VERSION: '18'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd frontend
        npm ci
        cd ../amplify/backend/function/createCase
        npm ci
        cd ../updateCase
        npm ci
        cd ../deleteCase
        npm ci
        cd ../getCase
        npm ci
        cd ../listCases
        npm ci
        cd ../searchCases
        npm ci

    - name: Run npm audit
      run: |
        cd frontend
        npm audit --audit-level=moderate
        cd ../amplify/backend/function/createCase
        npm audit --audit-level=moderate
        cd ../updateCase
        npm audit --audit-level=moderate
        cd ../deleteCase
        npm audit --audit-level=moderate
        cd ../getCase
        npm audit --audit-level=moderate
        cd ../listCases
        npm audit --audit-level=moderate
        cd ../searchCases
        npm audit --audit-level=moderate

    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Run ESLint security rules
      run: |
        cd frontend
        npm run lint:security
        cd ../amplify/backend/function/createCase
        npm run lint:security
        cd ../updateCase
        npm run lint:security
        cd ../deleteCase
        npm run lint:security
        cd ../getCase
        npm run lint:security
        cd ../listCases
        npm run lint:security
        cd ../searchCases
        npm run lint:security

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: amplify/
        framework: cloudformation
        output_format: sarif
        output_file_path: checkov-results.sarif

    - name: Upload Checkov results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: checkov-results.sarif

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  compliance-check:
    name: Compliance Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run OWASP ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'https://staging.legalflow3.com'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'

    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'LegalFlow3'
        path: '.'
        format: 'SARIF'
        out: 'dependency-check-report.sarif'

    - name: Upload Dependency Check results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: dependency-check-report.sarif

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, infrastructure-scan, secrets-scan, compliance-check]
    if: always()

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate security report
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Scan Results" >> security-report.md
        echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> security-report.md
        echo "- Code Scan: ${{ needs.code-scan.result }}" >> security-report.md
        echo "- Infrastructure Scan: ${{ needs.infrastructure-scan.result }}" >> security-report.md
        echo "- Secrets Scan: ${{ needs.secrets-scan.result }}" >> security-report.md
        echo "- Compliance Check: ${{ needs.compliance-check.result }}" >> security-report.md

    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md

    - name: Comment PR with security report
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('security-report.md', 'utf8');
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          });
